@using Backend.Core
@using Backend.Engine
@using Backend.Util
@using MudBlazor

@code {
    [Parameter] public bool InvertView { get; init; } = false;
    [Parameter] public string SessionId { get; init; } = string.Empty;
    [Parameter] public EventCallback<GameSession> OnGameInitialized { get; set; }
    [Parameter] public EventCallback<((int col, int row), Board board)> OnSquareSelected { get; set; }
}

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (gameSession != null)
    {
        <MudStack Spacing="3" AlignItems="AlignItems.Center">
            <MudPaper>
            <MudText Typo="Typo.h4" Align="Align.Center"> Turn: @(Board.WhiteToMove ? "White" : "Black") </MudText>
            <ChessBoard Board="Board" OnSquareSelected="@(async (tuple) => await HandleSquareSelected(tuple))" InvertView="InvertView" />
            <MudText Typo="Typo.body1" Align="Align.Center">
                Move history: @Board.AlgrebraicMoveHistory
            </MudText>
            </MudPaper>
            <MudButton OnClick="ToStart"> Go to home </MudButton>
        </MudStack>            
        
    }
    else
    {
        <MudPaper>
            <MudText Typo="Typo.h4" Align="Align.Center" >
                Access Denied
            </MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" >
                Invalid or expired game session. Please start a new game.
            </MudText>
        </MudPaper>
        <MudButton OnClick="ToStart"> Go to home </MudButton>
    }
</MudContainer>

@code {
    [Inject] public required GameSessionService GameSessionService { get; init; }
    [Inject] public required NavigationManager NavigationManager { get; init; }

    public Board Board { get; } = new Board(PositionLoader.LoadBoardSetup("Backend\\boardSetup.json"));
    private GameSession? gameSession;
    public Piece? Selected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Validate session
        gameSession = GameSessionService.GetSession(SessionId);

        if (gameSession == null)
        {
            return; // Invalid session, will show access denied
        }

        await OnGameInitialized.InvokeAsync(gameSession);
    }

    private async Task HandleSquareSelected((int, int) tuple) => await OnSquareSelected.InvokeAsync((tuple, Board));
    private void ToStart() => NavigationManager.NavigateTo("/");
}