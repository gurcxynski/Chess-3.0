@page "/localgame/{SessionId}"
@rendermode InteractiveServer

@using Backend.Core
@using Backend.Engine
@using Backend.Util

@if (gameSession != null)
{
	<ChessBoard board="board" OnSquareSelected="((int col, int row) p) => SquareSelected(p.col, p.row)"  />
}
else
{
	<div>
		<h3>Access Denied</h3>
		<p>Invalid or expired game session. Please start a new game.</p>
		<button @onclick="ToStart">Go to Home</button>
	</div>
}

@code {
	[Parameter] public string SessionId { get; set; } = string.Empty;
	private GameSession? gameSession;
	Board board = new Board(Backend.Core.PositionLoader.LoadBoardSetup("Backend\\boardSetup.json"));
	
	[Inject]
	public required GameSessionService GameSessionService { get; init; }
	[Inject]
	public required NavigationManager NavigationManager { get; init; }
	Piece? selected;
	
	protected override void OnInitialized()
	{
		// Validate session
		gameSession = GameSessionService.GetSession(SessionId);
		
		if (gameSession == null || gameSession.GameType != GameType.LocalGame)
		{
			return; // Invalid session, will show access denied
		}
	}
	private void ToStart()
	{
		NavigationManager.NavigateTo("/");
	}
	private void SquareSelected(int col, int row)
	{
		Piece? clicked = board.GetPieceAt(col, row);
		if ((selected is null && clicked is null) || (clicked is not null && clicked.IsWhite != board.WhiteToMove)) return;
		if (selected is null || clicked?.IsWhite == board.WhiteToMove)
		{
			selected = clicked;
			return;
		}
		Move? move = selected.TryCreatingMove(col, row, board);
		if (move is null) {
			Console.WriteLine("Invalid move");
			return;
		}
		board.ExecuteMove(move);
		selected = null;
		return;
	}
}