@page "/Error"
@using System.Diagnostics
@using MudBlazor
<PageTitle>Error</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-4">
        <MudText Typo="Typo.h4">Error</MudText>
        <MudText Typo="Typo.h6">An error occurred while processing your request.</MudText>
    </MudAlert>

    @if (ShowRequestId)
    {
        <MudCard Class="mb-4">
            <MudCardContent>
                <MudText Typo="Typo.body1">
                    <strong>Request ID:</strong> <code>@RequestId</code>
                </MudText>
            </MudCardContent>
        </MudCard>
    }

    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5" Class="mb-3">Development Mode</MudText>
            <MudText Typo="Typo.body1" Class="mb-3">
                Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
            </MudText>
            <MudText Typo="Typo.body1">
                <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
                It can result in displaying sensitive information from exceptions to end users.
                For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
                and restarting the app.
            </MudText>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code{
	[CascadingParameter]
	private HttpContext? HttpContext { get; set; }

	private string? RequestId { get; set; }
	private bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
	protected override void OnInitialized() =>
		RequestId = Activity.Current.Id ?? HttpContext.TraceIdentifier;
}